#!/usr/bin/env python2.7
from SocketServer import StreamRequestHandler, TCPServer
import subprocess
import encodings
import threading
import time
import sys
import os
import io

LLD_NAME = 'SDC_IO'

def sim_format(lld, data):
  return '%s\t%s\n' % (lld , encodings.codecs.encode(data, 'hex'))

class SIMIO(StreamRequestHandler):
  def handle(self):
    print '[SIMIO] CONNECT'

    for line in self.rfile:
      sdc_cmd = self.decodeline(line)

      # parse sdc message
      _, cmd, _, startblk, _, nblks = sdc_cmd.split(' ', 5)
      startblk = int(startblk, 16)
      nblks    = int(nblks, 16)

      # sdc asked to read data
      if cmd == 'read':
        # get requested data and send it back to sdc
        data = memfile.read(startblk, nblks)
        self.wfile.write(sim_format(LLD_NAME, data))

      # sdc asked to write data
      elif cmd == 'write':
        # read and decode another io message that contains the data
        line = self.rfile.readline()
        data = self.decodeline(line)

        # store the data
        memfile.write(startblk, data)

  def decodeline(self, line):
    # split the line based on the simio protocol
    source, code = line.strip().split('\t', 1)

    # decode simio data
    data = code.decode('hex')
    sys.stdout.write('[%s] RECV %s\n' % (source, data))

    return data

class SDCard(object):
  MMCSD_BLOCK_SIZE = 512

  def __init__(self, size):
    self.nblks = size / self.MMCSD_BLOCK_SIZE
    self.memfile = io.BytesIO(bytearray(size))

  def read(self, startblk, nblks):
    # set position
    memfile.setblock(startblk)

    # get output buffer
    length = nblks * self.MMCSD_BLOCK_SIZE
    data = bytearray(length)

    # read data
    nb = self.memfile.readinto(data)
    if nb != length:
      raise Exception("read nb %d != buffer length %d" % (nb, length))

    return data

  def write(self, startblk, data):
    memfile.setblock(startblk)
    return self.memfile.write(data)

  def setblock(self, block):
    return self.memfile.seek(block * self.MMCSD_BLOCK_SIZE, os.SEEK_SET)

  def dump(self, path):
    f = open(path, 'w')
    f.write(self.memfile.getvalue())
    f.close()

# create a 4K SD card - will be expanded as needed
memfile = SDCard(4 * 1024)

# prevent bind errors on relaunch
TCPServer.allow_reuse_address = True

# listen for simio connections
simio = TCPServer(('localhost', 27000), SIMIO)
simio_thread = threading.Thread(target=simio.handle_request)
simio_thread.setDaemon(True)
simio_thread.start()

# spawn the unit test
subprocess.check_call(['./ch'])
simio_thread.join()

memfile.dump('out.bin')
subprocess.call('hexdump', 'out.bin')
